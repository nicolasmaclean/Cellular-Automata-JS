{"version":3,"sources":["Cellular-Automata-JS/CARender.js","Cellular-Automata-JS/CellularAutomata.js","Cellular-Automata-JS/Grid.js","Cellular-Automata-JS/NSet.js","Cellular-Automata-JS/UserInput.js","Cellular-Automata-JS/Vector.js","Cellular-Automata-JS/Viewer.js","Cellular-Automata-JS/react components/CAGrid.js","Cellular-Automata-JS/react components/CAInput.js","Cellular-Automata-JS/react components/CAData.js","index.js","Cellular-Automata-JS/JSONConverter.js"],"names":["CARender","configs","this","fps","fpsStep","viewer","Viewer","Instantiate","CellularAutomata","step","needDraw","cellColorsLength","Object","keys","cellColors","length","coordsSet","lineCoordsDone","NSet","lineCoordsAdd","fpsInterval","fpsIntervalS","lastFrame","lastFrameS","obj","paused","drawSpecificState","drawState","val","update","currentFrame","Date","now","elapsed","currentFrameS","elapsedS","loopState","loopEnum","stepLoop","renderState","drawLoop","targetPos","equals","pos","draw","noLoop","nothing","drawContext","DrawCellFunc","DrawStyleFunc","PreStepFunc","PostStepFunc","checkState","handleInput","PreStep","Step","PostStep","Draw","cells","grid","createBatchObject","xBounds","Vector","Math","floor","x","cellSize","windowSize","yBounds","y","cx","cy","getCell","clr","undefined","console","log","push","difference","forEach","setCell","cycleCell","union","clr_bg","Update","gridData","drawGridData","DrawGrid","coordIndex","defaultObj","JSObjectDefault","width","height","position","mode","generation","zoom","maxZoom","minZoom","coord","fillRect","fillStyle","strokeStyle","moveTo","lineTo","stroke","centerOffset","div_int","add","prebuiltModes","includes","title","rules","stateNames","ruleDescriptions","subtitle","toLowerCase","0","1","2","3","neighborsValues","curVal","liveNeighbors","filter","result","Grid","cellsToCheck","Set","nMap","Map","key","getNeighboringCells","hasCell","tostring","nVal","applyRules","set","str_key","unstring","setNewMap","pruneDefaultValues","neighbors","getNeighborsValues","rule","n","mat","cellStateAmt","batch","removeCell","str","get","has","arr","cell","delete","func","value","k","v","split","parseFloat","item","i","search","splice","B","size","intersect","trim","A","s","loadSet","UserInput","render","init_scrollDivider","scrollDivider","keybinds","pause","grabCanvas","eventsDidAttach","mouse_grabbing","canvas","attachKey","attachMouse","attachMouseEvent","attachKeyEvents","onmousemove","event","mouseMove","bind","onmousedown","grabGrid","startDrawing","onmouseup","releaseGrid","toggleCellHandler","onmouseleave","stopDrawing","disableCursorStyle","onmouseenter","enableCursorStyle","onwheel","mouseScrollHandler","document","onkeyup","singleStep","repeat","NUMKEYS","setSpecificStateHandeler","drawSpecificStateToggle","grabCanvasToggle","pauseToggle","e","buttons","moveGridHandeler","drawCellsHandeler","moveGrid","movementX","movementY","movement","deltaY","inc","addZoom","drawCells","offsetX","offsetY","clientX","clientY","screenCoord","screenToGrid","lastCoord","dif","abs","sub","lineGen","toggleCell","screenCoords","gridCoord","setSpecificState","num","setDrawState","Number","body","style","cursor","v1","v2","x0","y0","x1","y1","plotLineLow","plotLineHigh","dx","dy","xi","coords","D","yi","other_vector","ceil","factor","l","mult_int","vector","diff","dSQ","sqrt","copy","lerpFactor","defaultCellSize","moveToPosInstant","z","zoomP","a","setZoom","moveToPos","nPos","translateCoordToCenterScreen","gridToScreen","distanceSQ","lerp","CAGrid","props","canvasRef","React","createRef","requestIdRef","dataRef","inputRef","ogConfigs","assign","fillJSObjectBlanks","fillModesInObj","renderer","userInput","elements","gridInputEnabled","className","ref","parentRef","child","state","current","forceUpdate","requestAnimationFrame","tick","getContext","attachEvents","cancelAnimationFrame","Component","CAInput","indexOf","modeLength","modes","input","pausedText","grabText","states","color","backgroundColor","onClick","m","nRender","ReInitialize","querySelector","setState","id","type","defaultValue","onChange","target","disabled","JSONConverter","SaveCARender","LoadCARender","files","map","accept","click","name","cellAutoGridRef","window","innerWidth","innerHeight","cellAutoGrid","gridDataEnabled","ReactDOM","getElementById","JSON","stringify","fnBody","Function","String","substring","RegExp","packageMapByState","stateAmt","parse","string","prefix","eval","slice","VectorArr","unpackageMapByState","JSToJSON","blob","Blob","saveBlob","fileName","createElement","appendChild","url","URL","createObjectURL","href","download","revokeObjectURL","ConvertToJSONFile","json","callback","text","then","JSONToJS","ReInstantiate"],"mappings":"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","file":"static/js/main.44c01fa5.chunk.js","sourcesContent":["// this renders a given GridPrender to a HTML canvas\\\r\n\r\nimport {\r\n    CellularAutomata,\r\n    Viewer,\r\n    Vector,\r\n    NSet,\r\n} from './import';\r\n\r\nclass CARender\r\n{\r\n    constructor(configs)\r\n    {\r\n        // stores a reference\r\n        this.configs = configs;\r\n\r\n        // FPS controller stuff\r\n        this.configs.fps = configs.fps;\r\n        this.configs.fpsStep = configs.fpsStep;\r\n        \r\n        // viewer\r\n        this.viewer = new Viewer(configs);\r\n        \r\n        this.Instantiate();\r\n    }\r\n    \r\n    // instantiates or reinstantiates all relevant values for clearing the canvas\r\n    Instantiate()\r\n    {\r\n        // initializes simulation\r\n        this.configs.CellularAutomata = new CellularAutomata(this.configs);\r\n        \r\n        // state management\r\n        this.step = false;\r\n        this.needDraw = true;\r\n        \r\n        // configs\r\n        this.cellColorsLength = Object.keys(this.configs.cellColors).length;\r\n        \r\n        // input\r\n        this.coordsSet = []; // list of lists that store a coord and value to set at that coord\r\n        this.lineCoordsDone = new NSet(); // stores a set of coords\r\n        this.lineCoordsAdd = new NSet();\r\n\r\n        // fps controller\r\n        this.fpsInterval = 1000 / this.configs.fps;\r\n        this.fpsIntervalS = 1000 / this.configs.fpsStep;\r\n        \r\n        this.lastFrame = 0;\r\n        this.lastFrameS = 0;\r\n    }\r\n    \r\n    // reinstantiates with given javascript object\r\n    ReInstantiate(obj)\r\n    {\r\n        this.configs = obj;\r\n\r\n        this.configs.paused = obj.paused;\r\n        this.configs.drawSpecificState = obj.drawSpecificState;\r\n        this.configs.drawState = obj.drawState;\r\n    }\r\n\r\n    // sets the drawState and clamps values too big\r\n    setDrawState(val)\r\n    {\r\n        this.configs.drawState = val;\r\n\r\n        if(this.configs.drawState >= this.cellColorsLength)\r\n        {\r\n            this.configs.drawState = this.cellColorsLength-1;\r\n        }\r\n    }\r\n\r\n    // returns the update state and advances the update state\r\n    checkState(update)\r\n    {\r\n        // frame rate control\r\n        var currentFrame = Date.now();\r\n        var elapsed = currentFrame - this.lastFrame;\r\n        \r\n        var currentFrameS = Date.now();\r\n        var elapsedS = currentFrameS - this.lastFrameS;\r\n        \r\n        // simulation loop\r\n        if (!this.configs.paused && this.configs.loopState === CARender.loopEnum.stepLoop && elapsed > this.fpsInterval)\r\n        {\r\n            if (update)\r\n            {\r\n                this.lastFrame = currentFrame - (elapsed % this.fpsInterval);\r\n            }\r\n            \r\n            return CARender.renderState.step;\r\n        }\r\n        \r\n        // single step\r\n        else if ((this.configs.loopState !== CARender.loopEnum.stepLoop || this.configs.paused) && this.step && elapsedS > this.fpsIntervalS) // add a fps controller\r\n        {\r\n            if (update)\r\n            {\r\n                this.lastFrameS = currentFrameS - (elapsedS % this.fpsIntervalS);\r\n                this.step = false;\r\n            }\r\n\r\n            return CARender.renderState.step;\r\n        }\r\n        \r\n        // TODO: move viewer.pos == viewer.target pos to be handelled in viewer.update and have it modify viewer.needDraw\r\n        // draw loop\r\n        else if (((this.configs.paused || this.configs.loopState === CARender.loopEnum.drawLoop) && this.needDraw) || this.needDraw || !this.viewer.targetPos.equals(this.viewer.pos))\r\n        {\r\n            if (update)\r\n            {\r\n                this.needDraw = false;\r\n            }\r\n            return CARender.renderState.draw;\r\n        }\r\n\r\n        // no loop\r\n        else if (this.configs.loopState === CARender.loopEnum.noLoop)\r\n        {\r\n            return CARender.renderState.noLoop;\r\n        }\r\n\r\n        // nothing\r\n        else\r\n        {\r\n            return CARender.renderState.nothing;\r\n        }\r\n    }\r\n\r\n    // checks the state of the simulation/render and will step the simulation or render it if necessary. returns true if the update loop should continue.\r\n    Update(drawContext, configs)\r\n    // Update(drawContext, DrawCellFunc = CARender.DrawCell, DrawStyleFunc = CARender.DrawStyle, PreStepFunc = CARender.PreStepDraw, PostStepFunc = CARender.PostStepDraw)\r\n    {\r\n        // stores references to configs functions\r\n        var DrawCellFunc = configs.DrawCellFunc;\r\n        var DrawStyleFunc = configs.DrawStyleFunc;\r\n        var PreStepFunc = configs.PreStepFunc;\r\n        var PostStepFunc = configs.PostStepFunc;\r\n\r\n        // be careful this will update frame controller\r\n        var renderState = this.checkState(true);\r\n\r\n        // steps the simulation\r\n        if (renderState === CARender.renderState.step)\r\n        {\r\n            this.handleInput();\r\n            this.PreStep(drawContext, PreStepFunc);\r\n            this.Step()\r\n            this.PostStep(drawContext, PostStepFunc, DrawStyleFunc, DrawCellFunc);\r\n        }\r\n\r\n        // draws the grid\r\n        else if (renderState === CARender.renderState.draw)\r\n        {\r\n            this.handleInput();\r\n            this.Draw(drawContext, PreStepFunc, PostStepFunc, DrawStyleFunc, DrawCellFunc);\r\n        }\r\n    }\r\n\r\n    // returns a js object with cell colors as keys and stored as their values\r\n    drawGridData()\r\n    {\r\n        var cells = this.configs.CellularAutomata.grid.createBatchObject();\r\n        \r\n        // grid coords within the window bounds, inclusive\r\n        this.xBounds = new Vector(Math.floor(-this.viewer.pos.x/this.viewer.cellSize), Math.floor((-this.viewer.pos.x+this.configs.windowSize.x)/this.viewer.cellSize));\r\n        this.yBounds = new Vector(Math.floor(-this.viewer.pos.y/this.viewer.cellSize), Math.floor((-this.viewer.pos.y+this.configs.windowSize.y)/this.viewer.cellSize));\r\n        \r\n        for (var x = this.xBounds.x; x <= this.xBounds.y; x++)\r\n        {\r\n            for (var y = this.yBounds.x; y <= this.yBounds.y; y++)\r\n            {\r\n                // cell info\r\n                var cx = x*this.viewer.cellSize + this.viewer.pos.x;\r\n                var cy = y*this.viewer.cellSize + this.viewer.pos.y;\r\n                var val = this.configs.CellularAutomata.getCell(new Vector(x, y));\r\n                var clr = this.configs.CellularAutomata.grid.cellColors[val];\r\n\r\n                if (val === undefined || clr === undefined)\r\n                    console.log(val, clr, x, y, cx, cy)\r\n                \r\n                cells[clr].push(new Vector(cx, cy));\r\n            }\r\n        }\r\n\r\n        return cells;\r\n    }\r\n\r\n    // TODO: update the way it cycles through cell states\r\n    // handles input stored in the Viewer object\r\n    handleInput()\r\n    {\r\n        // toggles coords in the line that haven't already been processed\r\n        NSet.difference(this.lineCoordsAdd, this.lineCoordsDone).forEach( val => \r\n        {\r\n            if (this.configs.drawSpecificState)\r\n            {\r\n                this.configs.CellularAutomata.setCell(val, this.configs.drawState);\r\n            }\r\n            else\r\n            {\r\n                this.configs.CellularAutomata.cycleCell(val);\r\n            }\r\n        })\r\n\r\n        // updates the sets\r\n        this.lineCoordsDone.union(this.lineCoordsAdd);\r\n        this.lineCoordsAdd = new NSet();\r\n\r\n        // sets given coords with their requested value\r\n        for (let x in this.coordsSet)\r\n        {\r\n            this.configs.CellularAutomata.setCell(x[0], x[1]);\r\n        }\r\n    }\r\n\r\n    // simulation\r\n    Step()\r\n    {\r\n        this.handleInput();\r\n        this.configs.CellularAutomata.step();\r\n    }\r\n    \r\n    // perfroms draw without stepping the simulation\r\n    Draw(draw, PreStepFunc, PostStepFunc, DrawStyleFunc, DrawCellFunc)\r\n    {\r\n        this.PreStep(draw, PreStepFunc);\r\n        this.PostStep(draw, PostStepFunc, DrawStyleFunc, DrawCellFunc);\r\n    }\r\n\r\n    // pre simulation\r\n    PreStep(drawContext, PreStepFunc)\r\n    {\r\n        // clears the canvas\r\n        var clr = this.configs.clr_bg;\r\n        PreStepFunc(drawContext, clr, this.configs.windowSize);\r\n        \r\n        this.viewer.Update();\r\n    }\r\n\r\n    // post simulation\r\n    PostStep(drawContext, PostStepFunc, DrawStyleFunc, DrawCellFunc)\r\n    {\r\n        var gridData = this.drawGridData();\r\n        var cellSize = this.viewer.cellSize;\r\n        CARender.DrawGrid(gridData, cellSize, drawContext, DrawStyleFunc, DrawCellFunc);\r\n        \r\n        // TODO: separate this into a second \"UI\" canvas that is painted ontop of the grid canvas\r\n        var bg = this.configs.clr_bg;\r\n        PostStepFunc(drawContext, bg, this.configs.windowSize);\r\n    }\r\n\r\n    // draws the grid retrieved from this\r\n    static DrawGrid(gridData, cellSize, drawContext, DrawStyleFunc, DrawCellFunc)\r\n    {\r\n        // cycles through colors\r\n        for (let clr in gridData)\r\n        {\r\n            // sets fill color/style to take advantage of color batching\r\n            DrawStyleFunc(drawContext, clr);\r\n            \r\n            // cycles through coordinates\r\n            for (let coordIndex in gridData[clr])\r\n            {\r\n                var coord = gridData[clr][coordIndex];\r\n\r\n                // draws current cell\r\n                DrawCellFunc(drawContext, coord, cellSize);\r\n            }\r\n        }\r\n    }\r\n\r\n    // fills in missing properties with default values\r\n    static fillJSObjectBlanks(obj)\r\n    {\r\n        var defaultObj = CARender.JSObjectDefault();\r\n        \r\n        if (obj.width === undefined) { obj.width = defaultObj.width}\r\n        if (obj.height === undefined) { obj.height = defaultObj.height}\r\n        if (obj.windowSize === undefined) { obj.windowSize = new Vector(obj.width, obj.height)}\r\n        \r\n        if (obj.x === undefined) { obj.x = defaultObj.x}\r\n        if (obj.y === undefined) { obj.y = defaultObj.y}\r\n        if (obj.position === undefined) { obj.position = new Vector(obj.x, obj.y)}\r\n\r\n        // if (obj.cellColors === undefined) { obj.cellColors = defaultObj.cellColors}\r\n        // if (obj.rules === undefined) { obj.rules = defaultObj.rules}\r\n        // if (obj.stateNames === undefined) { obj.stateNames = defaultObj.stateNames}\r\n        // if (obj.ruleDescriptions === undefined) { obj.ruleDescriptions = defaultObj.ruleDescriptions}\r\n        // if (obj.title === undefined) { obj.title = defaultObj.title}\r\n        if (obj.mode === undefined) { obj.mode = defaultObj.mode; }\r\n\r\n        if (obj.generation === undefined) { obj.generation = defaultObj.generation}\r\n        // if (obj.CellularAutomata === undefined) { obj.CellularAutomata = defaultObj.CellularAutomata}\r\n        if (obj.clr_bg === undefined) { obj.clr_bg = defaultObj.clr_bg}\r\n        \r\n        if (obj.loopState === undefined) { obj.loopState = defaultObj.loopState}\r\n        if (obj.paused === undefined) { obj.paused = defaultObj.paused}\r\n        if (obj.drawSpecificState === undefined) { obj.drawSpecificState = defaultObj.drawSpecificState}\r\n        if (obj.drawState === undefined) { obj.drawState = defaultObj.drawState}\r\n\r\n        if (obj.zoom === undefined) { obj.zoom = defaultObj.zoom}\r\n        if (obj.maxZoom === undefined) { obj.maxZoom = defaultObj.maxZoom}\r\n        if (obj.minZoom === undefined) { obj.minZoom = defaultObj.minZoom}\r\n\r\n        if (obj.fps === undefined) { obj.fps = defaultObj.fps}\r\n        if (obj.fpsStep === undefined) { obj.fpsStep = defaultObj.fpsStep}\r\n        \r\n        if (obj.DrawCellFunc === undefined) { obj.DrawCellFunc = defaultObj.DrawCellFunc}\r\n        if (obj.DrawStyleFunc === undefined) { obj.DrawStyleFunc = defaultObj.DrawStyleFunc}\r\n        if (obj.PreStepFunc === undefined) { obj.PreStepFunc = defaultObj.PreStepFunc}\r\n        if (obj.PostStepFunc === undefined) { obj.PostStepFunc = defaultObj.PostStepFunc}\r\n    }\r\n\r\n    // returns the default configuration\r\n    static JSObjectDefault()\r\n    {\r\n        var obj = {\r\n            mode: \"wire world\",\r\n            generation: 0,\r\n\r\n            width: 700,\r\n            height: 600,\r\n\r\n            x: 0,\r\n            y: 0,\r\n\r\n            clr_bg: \"#c0c0c0\",\r\n            fps: 10,\r\n            fpsStep: 20,\r\n            \r\n            loopState: CARender.loopEnum.stepLoop,\r\n            paused: false,\r\n            drawSpecificState: true,\r\n            drawState: 1,\r\n\r\n            zoom: 1,\r\n            maxZoom: 9,\r\n            minZoom: .8,\r\n        \r\n            DrawCellFunc: (drawContext, coord, cellSize) =>\r\n            {\r\n                drawContext.fillRect(coord.x, coord.y, cellSize-1, cellSize-1);\r\n            },\r\n            DrawStyleFunc: (drawContext, clr) =>\r\n            {\r\n                drawContext.fillStyle = clr;\r\n            },\r\n            PreStepFunc: (drawContext, clr, windowSize) =>\r\n            {\r\n                drawContext.fillStyle = clr;\r\n                drawContext.fillRect(0, 0, windowSize.x, windowSize.y);\r\n            },\r\n            PostStepFunc: (drawContext, clr, windowSize) =>\r\n            {\r\n                drawContext.strokeStyle = clr;\r\n                drawContext.moveTo(1, 1);\r\n                drawContext.lineTo(1, windowSize.y-1);\r\n                drawContext.lineTo(windowSize.x-1, windowSize.y-1);\r\n                drawContext.lineTo(windowSize.x-1, 1);\r\n                drawContext.lineTo(1, 1);\r\n                drawContext.stroke();\r\n            },\r\n        };\r\n\r\n        obj.windowSize = new Vector(obj.width, obj.height);\r\n        obj.position = new Vector(obj.x, obj.y);\r\n        \r\n        var centerOffset = Vector.div_int(obj.windowSize, obj.zoom * 10);\r\n        centerOffset.div_int(2);\r\n        obj.position.add(centerOffset);\r\n\r\n        return obj;\r\n    }\r\n\r\n    // fills in string modes for cell colors and rules. For example, it would convert cellColor: \"wire world\" into {0: 'white', 1: 'yellow', 2: 'red', 3: 'black'}\r\n    static fillModesInObj(configs)\r\n    {\r\n        if (CARender.prebuiltModes.includes(configs.mode))\r\n        {\r\n            configs.title = configs.mode;\r\n            configs.cellColors = configs.mode;\r\n            configs.rules = configs.mode;\r\n            configs.stateNames = configs.mode;\r\n            configs.ruleDescriptions = configs.mode;\r\n            configs.subtitle = \"prebuilt\";\r\n        }\r\n        else\r\n        {\r\n            // removes case sensitivity\r\n            if (typeof configs.cellColors === \"string\")\r\n            {\r\n                configs.cellColors.toLowerCase();\r\n            }\r\n\r\n            if (typeof configs.rules === \"string\")\r\n            {\r\n                configs.rules.toLowerCase();\r\n            }\r\n\r\n            if (typeof configs.stateNames === \"string\")\r\n            {\r\n                configs.stateNames.toLowerCase();\r\n            }\r\n\r\n            if (typeof configs.ruleDescriptions === \"string\")\r\n            {\r\n                configs.stateNames.toLowerCase();\r\n            }\r\n        }\r\n\r\n        // checks for cell colors\r\n        if (configs.cellColors === \"wire world\")\r\n        {\r\n            configs.cellColors = {0: 'white', 1: 'yellow', 2: 'red', 3: 'black'};\r\n        }\r\n        else if (configs.cellColors === \"game of life\")\r\n        {\r\n            configs.cellColors = {0: 'white', 1: 'black'};\r\n        }\r\n\r\n        // checks for rules\r\n        if (configs.rules === \"wire world\")\r\n        {\r\n            configs.rules = [\r\n                (neighborsValues, curVal) => {return [curVal === 0, 0];},\r\n                (neighborsValues, curVal) => {return [curVal === 1, 2];},\r\n                (neighborsValues, curVal) => {return [curVal === 2, 3];},\r\n                (neighborsValues, curVal) => {\r\n                    // gets live neighbor count\r\n                    var liveNeighbors = neighborsValues.filter( (val) => { return val === 1; } );\r\n                    liveNeighbors = liveNeighbors.length;\r\n                    \r\n                    // gets the outcome of the rule\r\n                    var result = (curVal === 3 && (liveNeighbors === 2 || (liveNeighbors === 1)));\r\n                    \r\n                    // formats the output\r\n                    return [curVal === 3, result ? 1 :  3];},\r\n            ];\r\n        }\r\n        else if (configs.rules === \"game of life\")\r\n        {\r\n            configs.rules = [ (neighborsValues, curVal) => {\r\n                // gets live neighbor count\r\n                var liveNeighbors = neighborsValues.filter( (val) => { return val === 1; } );\r\n                liveNeighbors = liveNeighbors.length;\r\n\r\n                // gets the outcome of the rule\r\n                var result = (curVal === 1 && (liveNeighbors === 2)) || (liveNeighbors === 3);\r\n\r\n                // formats the output\r\n                return [result, result ? 1 :  0];\r\n            }]\r\n        }\r\n\r\n        // checks for state names\r\n        if (configs.stateNames === \"wire world\")\r\n        {\r\n            configs.stateNames = [\"Background\", \"Electron Head\", \"Electron Tail\", \"Wire\"];\r\n        }\r\n        else if (configs.stateNames === \"game of life\")\r\n        {\r\n            configs.stateNames = [\"Dead\", \"Alive\"];\r\n        }\r\n\r\n        // checks for title\r\n        if (configs.title === \"wire world\")\r\n        {\r\n            configs.title = \"Brian Silverman's Wire World\";\r\n        }\r\n        else if (configs.title === \"game of life\")\r\n        {\r\n            configs.title = \"Conway's Game of Life\";\r\n        }\r\n\r\n        // checks for rule descriptions\r\n        if (configs.ruleDescriptions === \"wire world\")\r\n        {\r\n            configs.ruleDescriptions = [\"background ALWAYS remain background\", \r\n                \"electron head becomes electron tail\", \r\n                \"electron tail becomes wire\", \r\n                \"wire becomes electron head IF there are 1 or 2 neighboring electron heads\"\r\n            ];\r\n        }\r\n        else if (configs.ruleDescriptions === \"game of life\")\r\n        {\r\n            configs.ruleDescriptions = [\"(over population) live cells with 4 or more live neighbors 'dies'\",\r\n                \"(under population) live cells with less than 2 live neighbors 'dies'\",\r\n                \"(birth) dead cells with 3 live neighbors become alive\",\r\n                \"live cells with 2 or 3 neighbors remain alive\",\r\n            ];\r\n        }\r\n    }\r\n}\r\n\r\n// GAME OF LIFE\r\n// example rule function to be passes through. The output should be an array of length 2. The first element is a boolean that specifies if this \r\n// result is the final result. The second element is the new cell state.\r\n// function GameOfLifeRule(neighborsValues, curVal)\r\n// {\r\n//     // gets live neighbor count\r\n//     var liveNeighbors = neighborsValues.filter( (val) => { return val === 1; } );\r\n//     liveNeighbors = liveNeighbors.length;\r\n\r\n//     // gets the outcome of the rule\r\n//     var result = (curVal === 1 && (liveNeighbors === 2)) || (liveNeighbors === 3);\r\n\r\n//     // formats the output\r\n//     return [result, result ? 1 :  0];\r\n// }\r\n\r\n// WIRE WORLD\r\n// second example that shows how to implement wireworld. There are 4 cell states and I use 4 rules as shown below to implement it.\r\n\r\n// background remains background\r\n// function wireWorld1(neighborsValues, curVal)\r\n// {\r\n//     return [curVal === 0, 0];\r\n// }\r\n\r\n// electron head becomes electron tail\r\n// function wireWorld2(neighborsValues, curVal)\r\n// {\r\n//     return [curVal === 1, 2];\r\n// }\r\n\r\n// electron tail becomes wire\r\n// function wireWorld3(neighborsValues, curVal)\r\n// {\r\n//     return [curVal === 2, 3];\r\n// }\r\n\r\n// wire becomes electron head if there electron(s) adjacent\r\n// function wireWorld4(neighborsValues, curVal)\r\n// {\r\n//     // gets live neighbor count\r\n//     var liveNeighbors = neighborsValues.filter( (val) => { return val === 1; } );\r\n//     liveNeighbors = liveNeighbors.length;\r\n    \r\n//     // gets the outcome of the rule\r\n//     var result = (curVal === 3 && (liveNeighbors === 2 || (liveNeighbors === 1)));\r\n    \r\n//     // formats the output\r\n//     return [curVal === 3, result ? 1 :  3];\r\n// }\r\n\r\n// Game of Life and Wire World rules/colors set as static variables for easy default modes\r\n// live and dead\r\n// var GOLColors = { 0: 'white', 1: 'black' };\r\n// var GOLRules = [GameOfLifeRule];\r\n\r\n// // background, electron head, electron tail, wire\r\n// var WWRules = [wireWorld1, wireWorld2, wireWorld3, wireWorld4];\r\n\r\n// enums\r\nCARender.renderState = {\r\n    step: 0,\r\n    draw: 1,\r\n    nothing: 2,\r\n    noLoop: 3\r\n}\r\n\r\nCARender.loopEnum = {\r\n    noLoop: 0,\r\n    drawLoop: 1,\r\n    stepLoop: 2,\r\n    step: 3\r\n}\r\n\r\nCARender.prebuiltModes = [\r\n    \"game of life\",\r\n    \"wire world\",\r\n]\r\n\r\nexport default CARender;","// applies given rules using given struct for each cell\r\n\r\nimport { Grid } from './import'\r\n\r\nclass CellularAutomata\r\n{\r\n    constructor(configs)\r\n    {\r\n        this.grid = new Grid(configs.cellColors);\r\n        this.configs = configs;\r\n    }\r\n\r\n    // performs one step of the simulation\r\n    step()\r\n    {\r\n        var cellsToCheck = new Set();\r\n        var nMap = new Map();\r\n\r\n        // iterates through all live cells and adds their neighbors to a list\r\n        this.grid.forEach(key => {\r\n            // gets neighbors that will need to be checked later\r\n            var liveNeighbors = this.grid.getNeighboringCells(key);\r\n            \r\n            // keeps track of neighbors that will need to be checked\r\n            liveNeighbors.forEach(val => {\r\n                if(!this.grid.hasCell(val))\r\n                {\r\n                    cellsToCheck.add(Grid.tostring(val));\r\n                }\r\n            });\r\n            \r\n            var nVal = this.applyRules(key);\r\n\r\n            if(nVal !== 0)\r\n            {\r\n                nMap.set(Grid.tostring(key), nVal);\r\n            }\r\n        });\r\n\r\n\r\n        // iterates through the neighbors stored in last foreach loop\r\n        cellsToCheck.forEach(str_key => {\r\n            var key = Grid.unstring(str_key);\r\n\r\n            var nVal = this.applyRules(key);\r\n\r\n            if(nVal !== 0)\r\n            {\r\n                nMap.set(Grid.tostring(key), nVal);\r\n            }\r\n        });\r\n\r\n        this.grid.setNewMap(nMap);\r\n        this.grid.pruneDefaultValues();\r\n        this.configs.generation++;\r\n    }\r\n\r\n    applyRules(key)\r\n    {\r\n        // applies this.rules to each current live cell\r\n        var neighbors = this.grid.getNeighborsValues(key);\r\n        var val = this.getCell(key);\r\n\r\n        for (let rule in this.configs.rules)\r\n        {\r\n            var n = this.configs.rules[rule](neighbors, val) \r\n            if (n[0])\r\n            {\r\n                return n[1];\r\n            }\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n\r\n    // wrapper functions for sparce matrix access\r\n    getCell(coord)\r\n    {\r\n        return this.grid.getCell(coord);\r\n    }\r\n\r\n    setCell(coord, val)\r\n    {\r\n        this.grid.setCell(coord, val);\r\n    }\r\n\r\n    cycleCell(coord)\r\n    {\r\n        this.grid.cycleCell(coord);\r\n    }\r\n}\r\n\r\nexport default CellularAutomata;","// a sparse matrix that stores the value of each cell\r\n// TODO: setCell, getCell needs to be reconfigured if a version other than gamme of life is use\r\n// TODO: move functions like getNeighbors into cell.js or rules.js so that they are more customizable\r\n\r\nimport { Vector } from './import';\r\n\r\nclass Grid\r\n{\r\n    constructor(cellColors)\r\n    {\r\n        this.mat = new Map();\r\n        this.cellStateAmt = Object.keys(cellColors).length; // default cell states are binary\r\n        this.cellColors = cellColors;\r\n    }\r\n    \r\n    // returns a javascript object with colors storing list of coords\r\n    createBatchObject()\r\n    {\r\n        var batch = {};\r\n        \r\n        for (let x = 0; x < this.cellStateAmt; x++)\r\n        {\r\n            batch[this.cellColors[x]] = [];\r\n        }\r\n\r\n        return batch;\r\n    }\r\n\r\n    // tostring to convert a vector into a string, which is used as a key for the map\r\n    static tostring(v)\r\n    {\r\n        return v.x + \" \" + v.y;\r\n    }\r\n    \r\n    // unstringifies the key tostring\r\n    static unstring(str)\r\n    {\r\n        var arr = str.split(\" \");\r\n    \r\n        return new Vector(parseFloat(arr[0]), parseFloat(arr[1]));\r\n    }\r\n\r\n    // prunes false values to uphold sparse matrix\r\n    pruneDefaultValues()\r\n    {\r\n        var defaultValue = 0;\r\n        \r\n        this.mat.forEach((val, key) => {\r\n            if (val === defaultValue)\r\n            {\r\n                this.removeCell(Grid.unstring(key));\r\n            }\r\n        });\r\n    }\r\n\r\n    // gets cell value if its a valid key or gets the default value\r\n    getCell(pos)\r\n    {\r\n        var str = Grid.tostring(pos);\r\n        \r\n        if (this.hasCell(pos))\r\n        {\r\n            return this.mat.get(str);\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    // returns if the requested position is in the map\r\n    hasCell(pos)\r\n    {\r\n        var str = Grid.tostring(pos);\r\n        return this.mat.has(str);\r\n    }\r\n\r\n    // sets the value of the cell at pos with val\r\n    setCell(pos, val)\r\n    {\r\n        var str = Grid.tostring(pos);\r\n        this.mat.set(str, val);\r\n    }\r\n\r\n    // sets given cells to given values, in the format: arr[x, 0] = key, arr[x, 1] = val\r\n    setCells(arr)\r\n    {\r\n        arr.forEach(cell => {\r\n            this.setCell(cell[0], cell[1]);\r\n        })\r\n    }\r\n\r\n    // sets all given cell positions to given value\r\n    setCells_val(arr, val)\r\n    {\r\n        arr.forEach(cell => {\r\n            this.setCell(cell, val);\r\n        })\r\n    }\r\n\r\n    // removes a cell from the grid\r\n    removeCell(pos)\r\n    {\r\n        if (this.hasCell(pos))\r\n        {\r\n            this.mat.delete(Grid.tostring(pos));\r\n        }\r\n    }\r\n\r\n    // returns a list nieghboring coords\r\n    getNeighboringCells(pos)\r\n    {\r\n        var neighbors = []\r\n        \r\n        for (var x = -1; x <= 1; x++)\r\n            for (var y = -1; y <= 1; y++)\r\n                if ((x !== 0 || y !== 0))\r\n                    neighbors.push(new Vector(pos.x + x, pos.y + y));\r\n\r\n        return neighbors;\r\n    }\r\n\r\n    getNeighborsValues(pos)\r\n    {\r\n        var neighbors = []\r\n        \r\n        for (var x = -1; x <= 1; x++)\r\n            for (var y = -1; y <= 1; y++)\r\n                if ((x !== 0 || y !== 0))\r\n                    neighbors.push(this.getCell(new Vector(pos.x + x, pos.y + y)));\r\n\r\n        return neighbors;\r\n    }\r\n\r\n    // returns the amount of live neighbors for given cell\r\n    getLiveNeighbors(pos)\r\n    {\r\n        var neighbors = 0;\r\n        \r\n        for (var x = -1; x <= 1; x++)\r\n            for (var y = -1; y <= 1; y++)\r\n                if ( (x !== 0 || y !== 0) && this.getCell(Vector.add(pos, new Vector(x, y))) )\r\n                    neighbors++;\r\n\r\n        return neighbors;\r\n    }\r\n\r\n    // replaces the current map with the new one\r\n    setNewMap(nMap)\r\n    {\r\n        this.mat = nMap;\r\n    }\r\n\r\n    // a custom forEach function that loops through mat and calls the given function with the key in each iteration\r\n    forEach(func)\r\n    {\r\n        this.mat.forEach( (value, key) => {\r\n            var k = Grid.unstring(key);\r\n            func(k);\r\n        });\r\n    }\r\n\r\n    // cycles the requested cell to the next state\r\n    cycleCell(coord)\r\n    {\r\n        this.setCell( coord, (this.getCell(coord)+1) % this.cellStateAmt);\r\n    }\r\n}\r\n\r\nexport default Grid;","// a custom set class\r\n// objects using this class must have an equals function for comparison\r\n\r\nclass NSet\r\n{\r\n    // creates an empty set\r\n    constructor()\r\n    {\r\n        this.arr = [];\r\n    }\r\n\r\n    loadSet(set)\r\n    {\r\n        set.forEach( (item) =>\r\n        {\r\n            this.arr.push(item);\r\n        });\r\n    }\r\n\r\n    // retrieves item at position\r\n    // [] array retrival also works\r\n    get(i)\r\n    {\r\n        return this.arr[i];\r\n    }\r\n\r\n    // attempts to add given item\r\n    add(item)\r\n    {\r\n        if (!this.has(item))\r\n        {\r\n            this.arr.push(item);\r\n        }\r\n\r\n    }\r\n\r\n    // returns if requested value is in the set\r\n    has(item)\r\n    {\r\n        return this.search(item) !== -1\r\n    }\r\n\r\n    size()\r\n    {\r\n        return this.arr.length;\r\n    }\r\n\r\n    // attempts to delete item at requested position\r\n    delete(i)\r\n    {\r\n        this.arr.splice(i, 1);\r\n        // delete this.arr[i];\r\n    }\r\n\r\n    // returns index of requested item or -1 if the item is not in the set\r\n    search(item)\r\n    {\r\n        for (let x = 0; x < this.arr.length; x++)\r\n        {\r\n            if (this.get(x).equals(item))\r\n                return x;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    forEach(func)\r\n    {\r\n        for (let i = 0; i < this.arr.length; i++)\r\n        {\r\n            var x = this.get(i);\r\n            func(x);\r\n        }\r\n    }\r\n\r\n    // adds items from set B to the current set\r\n    union(B)\r\n    {\r\n        // shortcuts if a given set is empty\r\n        if (B.size === 0)\r\n        {\r\n            return;\r\n        }\r\n        else if (this.size === 0)\r\n        {\r\n            this.arr = B.arr;\r\n        }\r\n        else\r\n        {\r\n            B.forEach( (item) => {\r\n                this.add(item);\r\n            });\r\n        }\r\n    }\r\n\r\n    // removes items in set B from the current set\r\n    difference(B)\r\n    {\r\n        // shortcut for empty given sets\r\n        if(this.size === 0 || B.size === 0)\r\n        {\r\n            return;\r\n        }\r\n        else\r\n        {\r\n            for (let x = B.arr.length-1; x >= 0; x--) \r\n            {\r\n                var item = B.get(x);\r\n                var i = this.search(item);\r\n\r\n                if(i !== -1)\r\n                {\r\n                    this.delete(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // replaces the current set with a new set of items in both sets\r\n    intersect(B)\r\n    {\r\n        this.arr = NSet.intersect(this, B).arr;\r\n    }\r\n\r\n    // returns a new set containing all elements of each given set\r\n    static union(A, B)\r\n    {\r\n        // shortcuts if a given set is empty\r\n        if (B.size === 0)\r\n            return A;\r\n        \r\n        if(A.size === 0)\r\n            return B;\r\n\r\n        \r\n        var s = new NSet();\r\n        s.loadSet(A);\r\n\r\n        B.forEach( (item) => {\r\n            s.add(item);\r\n        });\r\n\r\n        return s\r\n    }\r\n\r\n    // returns a new set of elements in set A and not in Set B\r\n    static difference(A, B)\r\n    {\r\n        // shortcut for empty given sets\r\n        if(A.size === 0 || B.size === 0)\r\n            return A;\r\n\r\n\r\n        var s = new NSet();\r\n        s.loadSet(A);\r\n\r\n        for (let x = B.arr.length-1; x >= 0; x--) \r\n        {\r\n            var item = B.get(x);\r\n            var i = A.search(item);\r\n\r\n            if(i !== -1)\r\n            {\r\n                s.delete(i);\r\n            }\r\n        }\r\n        \r\n        return s;\r\n    }\r\n\r\n    // returns the intersection of sets A and B\r\n    static intersect(A, B)\r\n    {\r\n        if (A.size === 0 || B === 0)\r\n            return new NSet();\r\n\r\n        var s = new NSet();\r\n\r\n        A.forEach( (item) => {\r\n            if (B.has(item))\r\n                s.add(item);\r\n        });\r\n\r\n        return s;\r\n    }\r\n\r\n    // prints the given set's contents to the console\r\n    log()\r\n    {\r\n        console.log(this.arr);\r\n    }\r\n\r\n    toString()\r\n    {\r\n        var str = \"[\"\r\n\r\n        this.forEach( (item => {\r\n            str += item + \" \";    \r\n        }))\r\n\r\n        str = str.trim();\r\n        str += \"]\";\r\n\r\n        return str;\r\n    }\r\n}\r\n\r\nexport default NSet;","import { Vector, NSet } from './import'\r\n\r\nclass UserInput\r\n{\r\n    // canvas be left out if you would like to manually call attachEvents later\r\n    constructor(render, init_scrollDivider = 15)\r\n    {\r\n        // instantance variables\r\n        this.render = render;\r\n        this.viewer = render.viewer;\r\n        this.scrollDivider = init_scrollDivider;\r\n\r\n        this.keybinds = {\r\n                pause: \"p\",             // pauses sim\r\n                step: \" \",              // steps sim once\r\n                grabCanvas: \"o\",        // toggle left click between grabbing canvas and drawing cells\r\n                drawSpecificState: \"i\", // toggles drawing mode between cycle and set to a specific state\r\n        };\r\n\r\n        // state variables\r\n        this.eventsDidAttach = false;\r\n\r\n        this.mouse_grabbing = false;\r\n        this.grabCanvas = true;\r\n    }\r\n\r\n    ReInitialize(render, viewer)\r\n    {\r\n        this.render = render;\r\n        this.viewer = viewer;\r\n    }\r\n        \r\n    // attaches all events to the given canvas\r\n    attachEvents(canvas, attachKey = false, attachMouse = true)\r\n    {\r\n        // skips if events have already been attached\r\n        if (this.eventsDidAttach)\r\n        {\r\n            return;\r\n        }\r\n        else\r\n        {\r\n            this.eventsDidAttach = true;\r\n        }\r\n\r\n        // attaches requested events\r\n        if (attachMouse)\r\n        {\r\n            this.attachMouseEvent(canvas);\r\n        }\r\n        \r\n        if (attachKey)\r\n        {\r\n            this.attachKeyEvents();\r\n        }\r\n    }\r\n\r\n    // attaches all mouses events\r\n    attachMouseEvent(canvas)\r\n    {\r\n        // moves canvas or draws cells\r\n        canvas.onmousemove = function (event)\r\n        {\r\n            this.mouseMove(event);\r\n        }.bind(this);\r\n\r\n        // grabs canvas or nothing\r\n        canvas.onmousedown = function (event)\r\n        {\r\n            if(this.grabCanvas)\r\n            {\r\n                this.grabGrid();\r\n            }\r\n            else{\r\n                this.startDrawing(event);\r\n            }\r\n        }.bind(this);\r\n        \r\n        // releases canvas or toggles cell\r\n        canvas.onmouseup = function (event)\r\n        {\r\n            if (this.grabCanvas)\r\n            {\r\n                this.releaseGrid();\r\n            }\r\n            else\r\n            {\r\n                this.toggleCellHandler(event);\r\n            }\r\n        }.bind(this);\r\n        \r\n        // releases canvas and stops drawing\r\n        canvas.onmouseleave = function (event)\r\n        {\r\n            this.releaseGrid();\r\n            this.stopDrawing();\r\n            this.disableCursorStyle();\r\n        }.bind(this);\r\n        \r\n        // enables cursor styling\r\n        canvas.onmouseenter = function (event) {\r\n            this.enableCursorStyle();\r\n        }.bind(this);\r\n        \r\n        // zooms\r\n        canvas.onwheel = function (event)\r\n        {\r\n            this.mouseScrollHandler(event);\r\n        }.bind(this);\r\n    }\r\n\r\n    // attaches all keyboard events\r\n    attachKeyEvents()\r\n    {\r\n        document.onkeyup = function (event) {\r\n            if (event.key === this.keybinds.step)\r\n            {\r\n                this.singleStep();\r\n            }\r\n            else if (event.key === this.keybinds.pause && !event.repeat)\r\n            {\r\n                this.pauseToggle();\r\n            }\r\n            else if (event.key === this.keybinds.grabCanvas && !event.repeat)\r\n            {\r\n                this.grabCanvasToggle();\r\n            }\r\n            else if (event.key === this.keybinds.drawSpecificState && !event.repeat)\r\n            {\r\n                this.drawSpecificStateToggle();\r\n            }\r\n            else if (UserInput.NUMKEYS.includes(event.key))\r\n            {\r\n                this.setSpecificStateHandeler(event);\r\n            }\r\n            else if (event.key === \"t\")\r\n            {\r\n                console.log(this.render)\r\n            }\r\n        }.bind(this);\r\n    }\r\n\r\n    // moves the viewer by mouse delta on mousemove event\r\n    mouseMove(e)\r\n    {\r\n        // grabs canvas to move it\r\n        if (this.grabCanvas && e.buttons === 1 && this.mouse_grabbing)\r\n        {\r\n            this.moveGridHandeler(e);\r\n        }\r\n        \r\n        // toggles cells states when the user holds left click \r\n        else if (!this.grabCanvas && e.buttons === 1)\r\n        {\r\n            this.drawCellsHandeler(e);\r\n        }\r\n    }\r\n\r\n    // wapper for this.moveGrid to process mouse event info\r\n    moveGridHandeler(e)\r\n    {\r\n        this.moveGrid(new Vector(e.movementX, e.movementY));\r\n    }\r\n\r\n    // moves viewer position by given movement vector\r\n    moveGrid(movement)\r\n    {\r\n        this.viewer.targetPos.add(new Vector(movement.x, movement.y));\r\n        this.render.needDraw = true;\r\n    }\r\n    \r\n    // grabs canvas\r\n    grabGrid()\r\n    {\r\n        this.mouse_grabbing = true;\r\n    }\r\n    \r\n    // lets go of canvas\r\n    releaseGrid()\r\n    {\r\n        this.mouse_grabbing = false;\r\n    }\r\n\r\n    // this.zoom wrapper that processes mouse event info\r\n    mouseScrollHandler(e)\r\n    {\r\n        this.zoom(-e.deltaY / this.scrollDivider)\r\n    }\r\n    \r\n    // zooms in and out\r\n    zoom(inc)\r\n    {\r\n        this.viewer.addZoom(inc)\r\n        this.render.needDraw = true;\r\n    }\r\n\r\n    // wrapper for this.drawCell() that processes mouse event info\r\n    drawCellsHandeler(e)\r\n    {\r\n        this.drawCells(new Vector(e.offsetX, e.offsetY));\r\n    }\r\n\r\n    // wrapper for this.startDrawing that processes mouse event info\r\n    startDrawingHandeler(e)\r\n    {\r\n        this.startDrawing(new Vector(e.clientX, e.clientY));\r\n    }\r\n    \r\n    // draws the first cell in a line\r\n    startDrawing(screenCoord)\r\n    {\r\n        // this.render.lineCoordsAdd.add(this.viewer.screenToGrid(screenCoord));\r\n        this.render.needDraw = true;\r\n    }\r\n\r\n    // draws cells\r\n    drawCells(screenCoord)\r\n    {\r\n        // copies input and converts to grid space\r\n        var coord = new Vector(screenCoord.x, screenCoord.y);\r\n        coord = this.viewer.screenToGrid(coord);\r\n\r\n        // catches cells that were skipped by the mousemove event\r\n        if (this.render.lineCoordsDone.size() !== 0)\r\n        {\r\n            var lastCoord = this.render.lineCoordsDone.get(this.render.lineCoordsDone.size()-1);\r\n            var dif = Vector.abs(Vector.sub(coord, lastCoord));\r\n\r\n            // checks if there were cells missed\r\n            if ( dif.x > 1 || dif.y > 1)\r\n            {\r\n                // gets a set of coords between the new coord and the previous coord\r\n                var tweenerCoords = UserInput.lineGen(lastCoord, coord);\r\n                \r\n                tweenerCoords.forEach( (item) =>\r\n                {\r\n                    this.render.lineCoordsAdd.add(item);\r\n                });\r\n            }\r\n        }\r\n\r\n        this.render.lineCoordsAdd.add(coord);\r\n        this.render.needDraw = true;\r\n    }\r\n    \r\n    // stops drawing cells\r\n    stopDrawing()\r\n    {\r\n        this.render.lineCoordsDone = new NSet();\r\n        this.render.lineCoordsAdd = new NSet();\r\n    }\r\n\r\n    // this.toggleCell wrapper that processes mouse event info\r\n    toggleCellHandler(e)\r\n    {\r\n        this.toggleCell(new Vector(e.offsetX, e.offsetY));\r\n    }\r\n\r\n    // toggles given cell\r\n    toggleCell(screenCoords)\r\n    {\r\n        var gridCoord = this.viewer.screenToGrid(screenCoords);\r\n\r\n        // will draw something if nothing has been drawn while the mouse was down\r\n        if (this.render.lineCoordsDone.size() === 0)\r\n        {\r\n            if (this.render.configs.drawSpecificState)\r\n            {\r\n                this.render.configs.CellularAutomata.setCell(gridCoord, this.render.configs.drawState);\r\n            }\r\n            else\r\n            {\r\n                this.render.configs.CellularAutomata.cycleCell(gridCoord);\r\n            }\r\n\r\n            this.render.needDraw = true;\r\n        }\r\n\r\n        \r\n        this.stopDrawing();\r\n    }\r\n    \r\n    // steps the simulation once if it is paused or in the draw loop\r\n    singleStep()\r\n    {\r\n        this.render.step = true;\r\n    }\r\n    \r\n    // pauses simulation if in the simulation loop\r\n    pauseToggle() \r\n    {\r\n        this.render.configs.paused = !this.render.configs.paused;\r\n    }\r\n\r\n    // switches left click between grabbing the canvas and drawing cells\r\n    grabCanvasToggle()\r\n    {\r\n        this.grabCanvas = !this.grabCanvas;\r\n        this.enableCursorStyle();\r\n    }\r\n\r\n    // toggles draw mode between cycle cell state and set to specific state\r\n    drawSpecificStateToggle()\r\n    {\r\n        this.render.configs.drawSpecificState = !this.render.configs.drawSpecificState;\r\n    }\r\n\r\n    // wrapper for this.setSpecificState that processes key event\r\n    setSpecificStateHandeler(event)\r\n    {\r\n        this.setSpecificState(event.key);\r\n    }\r\n\r\n    // sets specific draw state\r\n    setSpecificState(num)\r\n    {\r\n        this.render.setDrawState(Number(num));\r\n    }\r\n\r\n    // enables cursor styles\r\n    enableCursorStyle()\r\n    {\r\n        if (this.grabCanvas)\r\n        {\r\n            document.body.style.cursor = \"grab\";\r\n        }\r\n        else if (this.render.drawSpecificState)\r\n        {\r\n            document.body.style.cursor = \"pointer\";\r\n        }\r\n        else\r\n        {\r\n            document.body.style.cursor = \"crossHair\";\r\n        }\r\n    }\r\n\r\n    // disables cursor styles\r\n    disableCursorStyle()\r\n    {\r\n        document.body.style.cursor = \"initial\"\r\n    }\r\n\r\n    // returns a set of integer coords between the given points using Bresenham's line algo from wikipedia\r\n    static lineGen(v1, v2)\r\n    {\r\n        var x0 = Math.floor(v1.x);\r\n        var y0 = Math.floor(v1.y);\r\n        var x1 = Math.floor(v2.x);\r\n        var y1 = Math.floor(v2.y);\r\n        \r\n        if (Math.abs(y1 - y0) < Math.abs(x1 - x0))\r\n        {\r\n            if (x0 > x1)\r\n            return UserInput.plotLineLow(x1, y1, x0, y0);\r\n            else\r\n            return UserInput.plotLineLow(x0, y0, x1, y1);\r\n        }\r\n        else\r\n        {\r\n            if (y0 > y1)\r\n            return UserInput.plotLineHigh(x1, y1, x0, y0);\r\n            else\r\n            return UserInput.plotLineHigh(x0, y0, x1, y1);\r\n        }\r\n        \r\n    }\r\n    \r\n    static plotLineHigh(x0, y0, x1, y1)\r\n    {\r\n        var dx = x1 - x0;\r\n        var dy = y1 - y0;\r\n        var xi = 1;\r\n\r\n        var coords = new NSet();\r\n\r\n        if (dx < 0)\r\n        {\r\n            xi = -1;\r\n            dx = -dx;\r\n        }\r\n\r\n        var D = (2 * dx) - dy;\r\n        var x = x0;\r\n\r\n        for (let y = y0; y <= y1; y++)\r\n        {\r\n            coords.add(new Vector(x, y));\r\n\r\n            if (D > 0)\r\n            {\r\n                x = x + xi;\r\n                D = D + (2 * (dx - dy));\r\n            }\r\n            else\r\n            {\r\n                D = D + 2*dx;\r\n            }\r\n        }\r\n\r\n        return coords;\r\n    }\r\n    \r\n    static plotLineLow(x0, y0, x1, y1)\r\n    {\r\n        var dx = x1 - x0;\r\n        var dy = y1 - y0;\r\n        var yi = 1;\r\n        \r\n        var coords = new NSet();\r\n        \r\n        if (dy < 0)\r\n        {\r\n            yi = -1;\r\n            dy = -dy;\r\n        }\r\n        \r\n        var D = (2 * dy) - dx;\r\n        var y = y0;\r\n        \r\n        for (let x = x0; x <= x1; x++)\r\n        {\r\n            coords.add(new Vector(x, y));\r\n            \r\n            if (D > 0)\r\n            {\r\n                y = y + yi;\r\n                D = D + (2 * (dy - dx));\r\n            }\r\n            else\r\n            {\r\n                D = D + 2*dy;\r\n            }\r\n        }\r\n\r\n        return coords;\r\n    }\r\n}\r\n\r\nUserInput.NUMKEYS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n\r\nexport default UserInput;","// basic 4 function vector class\r\n\r\nclass Vector\r\n{\r\n    constructor(x, y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    // basic 4 operations\r\n    add(other_vector)\r\n    {\r\n        this.x += other_vector.x;\r\n        this.y += other_vector.y;\r\n    }\r\n    \r\n    sub(other_vector)\r\n    {\r\n        this.x -= other_vector.x;\r\n        this.y -= other_vector.y;\r\n    }\r\n\r\n    mult(other_vector)\r\n    {\r\n        this.x *= other_vector.x;\r\n        this.y *= other_vector.y;\r\n    }\r\n\r\n    div(other_vector)\r\n    {\r\n        this.x /= other_vector.x;\r\n        this.y /= other_vector.y;\r\n    }\r\n\r\n    equals(other_vector)\r\n    {\r\n        return this.x === other_vector.x && this.y === other_vector.y;\r\n    }\r\n\r\n    add_int(value)\r\n    {\r\n        this.x += value;\r\n        this.y += value;\r\n    }\r\n    \r\n    sub_int(value)\r\n    {\r\n        this.x -= value;\r\n        this.y -= value;\r\n    }\r\n\r\n    mult_int(value)\r\n    {\r\n        this.x *= value;\r\n        this.y *= value;\r\n    }\r\n\r\n    div_int(value)\r\n    {\r\n        this.x /= value;\r\n        this.y /= value;\r\n    }\r\n\r\n    equals_int(value)\r\n    {\r\n        return this.x === value && this.y === value;\r\n    }\r\n\r\n    floor()\r\n    {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n    }\r\n\r\n    ceil()\r\n    {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n    }\r\n\r\n    abs()\r\n    {\r\n        this.x = Math.abs(this.x);\r\n        this.y = Math.abs(this.y);\r\n    }\r\n\r\n    copy()\r\n    {\r\n        var v = new Vector();\r\n        v.x = this.x;\r\n        v.y = this.y;\r\n\r\n        return v;\r\n    }\r\n\r\n    lerp(other_vector, factor)\r\n    {\r\n        var l = Vector.sub(other_vector, this);\r\n        l.mult_int(factor);\r\n        this.add(l);\r\n    }\r\n\r\n    // static versions of above methods that will return new vectors, instead of modifying one of them\r\n    static add(vector, other_vector)\r\n    {\r\n        return new Vector(vector.x + other_vector.x, vector.y + other_vector.y);\r\n    }\r\n\r\n    static sub(vector, other_vector)\r\n    {\r\n        return new Vector(vector.x - other_vector.x, vector.y - other_vector.y);\r\n    }\r\n    \r\n    static mult(vector, other_vector)\r\n    {\r\n        return new Vector(vector.x * other_vector.x, vector.y * other_vector.y);\r\n    }\r\n    \r\n    static div(vector, other_vector)\r\n    {\r\n        return new Vector(vector.x / other_vector.x, vector.y / other_vector.y);\r\n    }\r\n\r\n    static add_int(vector, value)\r\n    {\r\n        return new Vector(vector.x + value, vector.y + value);\r\n    }\r\n\r\n    static sub_int(vector, value)\r\n    {\r\n        return new Vector(vector.x - value, vector.y - value);\r\n    }\r\n    \r\n    static mult_int(vector, value)\r\n    {\r\n        return new Vector(vector.x * value, vector.y * value);\r\n    }\r\n    \r\n    static div_int(vector, value)\r\n    {\r\n        return new Vector(vector.x / value, vector.y / value);\r\n    }\r\n\r\n    static equals(vector, other_vector)\r\n    {\r\n        return vector.x === other_vector.x && vector.y === other_vector.y;\r\n    }\r\n\r\n    static zero()\r\n    {\r\n        return new Vector(0, 0);\r\n    }\r\n\r\n    static floor(vector)\r\n    {\r\n        return new Vector(Math.floor(vector.x), Math.floor(vector.y));\r\n    }\r\n\r\n    static ceil(vector)\r\n    {\r\n        return new Vector(Math.ceil(vector.x), Math.ceil(vector.y));\r\n    }\r\n\r\n    static abs(vector)\r\n    {\r\n        return new Vector(Math.abs(vector.x), Math.abs(vector.y));\r\n    }\r\n\r\n    static lerp(vector, other_vector, factor)\r\n    {\r\n        var l = Vector.sub(other_vector, vector);\r\n        l.mult_int(factor);\r\n        l.add(vector);\r\n        return l;\r\n    }\r\n\r\n    static distance(vector, other_vector)\r\n    {\r\n        var diff = Vector.sub(vector, other_vector);\r\n        var dSQ = diff.x*diff.x + diff.y*diff.y;\r\n        return Math.sqrt(dSQ);\r\n    }\r\n\r\n    static distanceSQ(vector, other_vector)\r\n    {\r\n        var diff = Vector.sub(vector, other_vector);\r\n        return diff.x*diff.x + diff.y*diff.y;\r\n    }\r\n\r\n    toString()\r\n    {\r\n        return \"[\" + this.x + \", \" + this.y +\"]\";\r\n    }\r\n}\r\n\r\nexport default Vector","// stores info about the user's position in grid/screen space\r\n\r\nimport { Vector } from './import'\r\n\r\nclass Viewer\r\n{\r\n    constructor(configs)\r\n    {\r\n        this.configs = configs;\r\n\r\n        // data\r\n        this.pos = new Vector(0, 0); // move to input pos instantly \r\n        this.targetPos = this.pos.copy();\r\n        \r\n        this.zoom = configs.zoom;\r\n        this.maxZoom = configs.maxZoom;\r\n        this.minZoom = configs.minZoom;\r\n        \r\n        // config\r\n        this.lerpFactor = .2;\r\n        this.defaultCellSize = 10;\r\n        this.cellSize = this.defaultCellSize * this.zoom;\r\n        \r\n        // moves to given position\r\n        this.moveToPosInstant(configs.position);\r\n    }\r\n\r\n    // TODO: this sucks ass. Fix it.\r\n    // sets the zoom variable. updates viewer position and cellsize accordingly\r\n    setZoom(z)\r\n    {\r\n        var zoomP = this.zoom;\r\n        this.zoom = z;\r\n\r\n        // clamps zoom\r\n        if (this.zoom < this.minZoom)\r\n            this.zoom = this.minZoom;\r\n        else if (this.zoom > this.maxZoom)\r\n            this.zoom = this.maxZoom;\r\n\r\n        // zoom percentage\r\n        if (this.zoom > zoomP)\r\n        {\r\n            zoomP = -(this.zoom - zoomP) / zoomP;\r\n        }\r\n        else\r\n        {\r\n            zoomP = (zoomP - this.zoom) / this.zoom;\r\n        }\r\n\r\n        // offset so zoom is from the middle, not the top right right of the canvas\r\n        this.targetPos.add(new Vector(this.configs.windowSize.x*zoomP/4, this.configs.windowSize.y*zoomP/4));\r\n\r\n        this.cellSize = this.defaultCellSize * this.zoom;\r\n    }\r\n\r\n    addZoom(a)\r\n    {\r\n        this.setZoom(this.zoom + a);\r\n    }\r\n\r\n    // converts screen coord to grid space\r\n    screenToGrid(coord)\r\n    {\r\n        var gridCoord = Vector.sub(coord, this.pos);\r\n        gridCoord.div_int(this.cellSize);\r\n        gridCoord = Vector.floor(gridCoord);\r\n\r\n        return gridCoord;\r\n    }\r\n\r\n    // converts grid coord to screen space\r\n    gridToScreen(coord)\r\n    {\r\n        var screenCoord = coord.copy();\r\n        screenCoord.mult_int(this.cellSize);\r\n        screenCoord.add(this.pos);\r\n\r\n        return screenCoord;\r\n    }\r\n\r\n    // returns a vector of viewer.pos converted to grid coordinates\r\n    gridPosition()\r\n    {\r\n        var gridCoord = this.pos.copy();\r\n        gridCoord.div_int(this.cellSize);\r\n        gridCoord.ceil();\r\n        gridCoord.x = -gridCoord.x\r\n\r\n        return gridCoord;\r\n    }\r\n\r\n    moveToOrigin()\r\n    {\r\n        this.moveToPos(new Vector(0, 0));\r\n    }\r\n\r\n    // moves viewer.pos to given grid coord\r\n    moveToPos(vector)\r\n    {\r\n        var nPos = this.translateCoordToCenterScreen(vector);\r\n        nPos = this.gridToScreen(nPos);\r\n        this.targetPos = nPos;\r\n    }\r\n\r\n    // instant move viewer.pos to given grid coord\r\n    moveToPosInstant(vector)\r\n    {\r\n        // var nPos = this.translateCoordToCenterScreen(vector);\r\n        // var nPos = this.gridToScreen(vector);\r\n        var nPos = vector;\r\n        this.targetPos = nPos;\r\n        this.pos = nPos;\r\n    }\r\n\r\n    // adds offset to given grid coord so it is in the center of the screen\r\n    translateCoordToCenterScreen(vector)\r\n    {\r\n        var v = Vector.div_int(this.configs.windowSize, this.cellSize);\r\n        v.div_int(2);\r\n        return Vector.add(vector, v);\r\n    }\r\n\r\n    Update()\r\n    {\r\n        if (Vector.distanceSQ(this.pos, this.targetPos) < 1)\r\n        {\r\n            this.pos = this.targetPos;\r\n        }\r\n        else\r\n        {\r\n            this.pos.lerp(this.targetPos, this.lerpFactor);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Viewer","import React from 'react';\r\nimport { CARender, UserInput } from '../import';\r\nimport { CAInput } from './import';\r\n\r\nexport default class CAGrid extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        \r\n        // references\r\n        this.canvasRef = React.createRef();\r\n        this.requestIdRef = React.createRef();\r\n        this.dataRef = React.createRef();\r\n        this.inputRef = React.createRef();\r\n        \r\n        // processes configurations\r\n        this.configs = props.configs\r\n        this.ogConfigs = Object.assign({}, props.configs);\r\n        \r\n        if (this.configs === undefined)\r\n        {\r\n            this.configs = CARender.JSObjectDefault();\r\n        }\r\n        else\r\n        {\r\n            CARender.fillJSObjectBlanks(this.configs)\r\n        }\r\n\r\n        CARender.fillModesInObj(this.configs);\r\n        \r\n        // cellular automata\r\n        this.renderer = new CARender(this.configs);\r\n        this.userInput = new UserInput(this.renderer);\r\n        \r\n        // appends requested/necessary elements to be rendereroooo\r\n        var elements = []\r\n        \r\n        if (this.props.gridInputEnabled)\r\n        {\r\n            elements.push(<CAInput className =\"CAGridInput\" ref={this.inputRef} parentRef={this} key={3} />);\r\n        }\r\n        \r\n        this.child = (\r\n            <div className=\"flexRow wholeDeal\">\r\n                <canvas className=\"glCanvas flexItem\" ref={this.canvasRef} width={this.configs.width} height={this.configs.height} key={1}/>\r\n                <div className=\"CAPerp flexItem\">\r\n                    {elements}\r\n                </div>\r\n            </div>\r\n        );\r\n        \r\n        this.state = {\r\n            needDraw: 0,\r\n        };\r\n    }\r\n    \r\n    // update loop\r\n    tick()\r\n    {\r\n        // stops loop when canvas is offscreen. Note, the loop will resume when the canvas is back on screen.\r\n        if (!this.canvasRef.current) return;\r\n        \r\n        // updates canvas and simulation\r\n        var update = this.renderer.checkState(false);\r\n        this.renderer.Update(this.draw, this.configs);\r\n        \r\n        // updates CAInput\r\n        if (update !== CARender.renderState.nothing)\r\n        {\r\n            if (this.props.gridInputEnabled)\r\n            {\r\n                this.inputRef.current.forceUpdate();\r\n            }\r\n        }\r\n            \r\n        // loops the animation\r\n        if (this.configs.loopState !== CARender.loopEnum.noLoop)\r\n            this.requestIdRef.current = requestAnimationFrame(this.tick.bind(this));\r\n    }\r\n        \r\n    // animation cycle begins after the first render or once the canvas brought back on the screen\r\n    componentDidMount()\r\n    {\r\n        this.draw = this.canvasRef.current.getContext('2d');\r\n        this.userInput.attachEvents(this.canvasRef.current);\r\n        requestAnimationFrame(this.tick.bind(this));\r\n\r\n    }\r\n\r\n    // stops animation cycle when the canvas is destroyed or taken off screen\r\n    componentWillUnmount()\r\n    {\r\n        cancelAnimationFrame(this.requestIdRef.current);\r\n    }\r\n\r\n    // creates a canvas for the Cellular Automata simulation to be displayed on\r\n    render()\r\n    {\r\n        return this.child;\r\n    }\r\n}","import React from 'react';\r\nimport { JSONConverter, CARender } from '../import';\r\n\r\nexport default class CAInput extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        var i = CARender.prebuiltModes.indexOf(props.parentRef.renderer.configs.mode);\r\n        this.state = {\r\n            mode: i === -1 ? CARender.prebuiltModes.length : i,\r\n            modeLength: i === -1 ? CARender.prebuiltModes.length+1 : CARender.prebuiltModes.length,\r\n        }\r\n\r\n        this.modes = {};\r\n        this.modes[this.state.mode] = props.parentRef.renderer;\r\n    }\r\n    \r\n    render()\r\n    {\r\n        var renderer = this.props.parentRef.renderer;\r\n        var input = this.props.parentRef.userInput;\r\n        var grid = renderer.configs.CellularAutomata.grid;\r\n        \r\n        var pausedText = renderer.configs.paused ? \"Paused\" : \"Playing\";\r\n        var grabText = input.grabCanvas ? \"Move\" : \"Draw\";\r\n        var states = [];\r\n        var rules = [];\r\n        \r\n        var key = 0;\r\n        \r\n        for (let color in grid.cellColors)\r\n        {\r\n            states.push(\r\n                <div className=\"cellState flexCol\" key={0-key}>\r\n                    <div className=\"cellStateBackground\" style={{\r\n                        backgroundColor: grid.cellColors[color]\r\n                    }}\r\n                    onClick={\r\n                        () => input.setSpecificState(color)\r\n                    }>\r\n                    </div>\r\n                    <h3 className=\"cellStateName\"> {renderer.configs.stateNames[color]}</h3>\r\n                </div>\r\n            );\r\n            key++\r\n        }\r\n        \r\n        for (let rule in renderer.configs.ruleDescriptions)\r\n        {\r\n            rules.push(\r\n                <div className=\"ruleDescription\" key ={0-key}>\r\n                    <h3 className=\"rule\">\r\n                        {renderer.configs.ruleDescriptions[rule]}\r\n                    </h3>\r\n                </div>\r\n            );\r\n            key++\r\n        }\r\n        \r\n        return (\r\n            <div className=\"gridInput\">\r\n                <div className=\"header\">\r\n                    <div className=\"flexRow contentLeft noPadding\">\r\n                        <h1 className=\"title noMargin\"> {renderer.configs.title} </h1>\r\n                        <button className=\"arrowButton\" onClick={ () =>\r\n                        {\r\n                            // increments mode and prevents overflow\r\n                            var m = this.state.mode+1;\r\n                            m %= this.state.modeLength;\r\n                            \r\n                            // creates CARender object with prebuilt mode as needed\r\n                            if (this.modes[m] === undefined)\r\n                            {\r\n                                // creates appropiate configs obj\r\n                                var obj = {\r\n                                    width: this.props.parentRef.ogConfigs.width,\r\n                                    height: this.props.parentRef.ogConfigs.height,\r\n                                    mode: CARender.prebuiltModes[m],\r\n                                }\r\n                                \r\n                                CARender.fillJSObjectBlanks(obj);\r\n                                CARender.fillModesInObj(obj);\r\n                                \r\n                                // creates new render\r\n                                var nRender = new CARender(obj);\r\n                                \r\n                                \r\n                                // stores new render in this.modes cache\r\n                                this.modes[m] = nRender;\r\n                            }\r\n                            \r\n                            // points CAGrid references to the current mode\r\n                            this.modes[m].needDraw = true;\r\n                            this.props.parentRef.configs = this.modes[m].configs;\r\n                            this.props.parentRef.renderer = this.modes[m];\r\n\r\n                            // points userInput to current renderer\r\n                            this.props.parentRef.userInput.ReInitialize(this.modes[m], this.modes[m].viewer)\r\n\r\n                            // updates CA Subtitle Input\r\n                            document.querySelector(\"#CASubtitleInput\").value = this.modes[m].configs.subtitle;\r\n\r\n                            // updates the mode state\r\n                            this.setState({\r\n                                mode: m\r\n                            }) \r\n\r\n                        }}></button>\r\n                    </div>\r\n\r\n                    <div className=\"subheader\">\r\n                        <input id=\"CASubtitleInput\" className={\"inputText\"} type=\"text\" defaultValue={renderer.configs.subtitle} onChange={ (event) =>\r\n                        {\r\n                            console.log(renderer.configs.subtitle);\r\n                            renderer.configs.subtitle = event.target.value;\r\n                            console.log(renderer.configs.subtitle);\r\n                        }}></input>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"grid\">\r\n                    {/* State Draw Picker */}\r\n                    <div className=\"statePicker\">\r\n                        {states}\r\n                    </div>\r\n\r\n                    <div className=\"onePaddingLeft\">\r\n                        <h2> Generation: {renderer.configs.generation} </h2>\r\n                    </div>\r\n\r\n                    {/* pause/play button and simulation step button */}\r\n                    <div className=\"flexRow contentLeft\">\r\n                        <button className={\"button \" + pausedText} onClick={() => {input.pauseToggle(); this.forceUpdate()}} > \r\n                            {pausedText} \r\n                        </button>\r\n\r\n                        <button className=\"button fade\" onClick={() => { input.singleStep() }} disabled={!renderer.configs.paused}>\r\n                            Step Once\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* switch between draw/move, clear the simulation, and save */}\r\n                    <div className=\"flexRow contentLeft\">\r\n                        <button className={\"button \" + grabText} onClick={ () => {input.grabCanvasToggle(); this.forceUpdate()}}>\r\n                            {grabText}\r\n                        </button>\r\n\r\n                        <button className={\"button clear\"} onClick={ () => {renderer.Instantiate(); renderer.configs.generation = 0; this.forceUpdate()}}>\r\n                            Clear\r\n                        </button>\r\n\r\n                        <button className={\"button save\"} onClick={ () => {JSONConverter.SaveCARender(renderer); this.forceUpdate()}}>\r\n                            Save\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* load a previous save */}\r\n                    <div className=\"flexRow contentLeft\">\r\n                        <button className=\"button load\" onClick={ () => \r\n                            {\r\n                                JSONConverter.LoadCARender(document.querySelector(\"#CAFileUpload\").files[0], (configs) =>\r\n                                {\r\n                                    // update CASubtitleInput to configs.subtitle\r\n                                    configs.windowSize = this.props.parentRef.configs.windowSize;\r\n                                    var map = configs.CellularAutomata;\r\n                                    \r\n                                    var m = Object.keys(this.modes).length;\r\n                                    \r\n                                    // creates new render\r\n                                    var nRender = new CARender(configs);\r\n                                    nRender.configs.CellularAutomata.grid.setNewMap(map);\r\n                                    \r\n                                    // stores new render in this.modes cache\r\n                                    this.modes[m] = nRender;\r\n                                \r\n                                    // points CAGrid references to the current mode\r\n                                    this.modes[m].needDraw = true;\r\n                                    this.props.parentRef.configs = this.modes[m].configs;\r\n                                    this.props.parentRef.renderer = this.modes[m];\r\n\r\n                                    // points userInput to current renderer\r\n                                    this.props.parentRef.userInput.ReInitialize(this.modes[m], this.modes[m].viewer)\r\n                                        \r\n                                    this.setState({\r\n                                        mode: m,\r\n                                        modeLength: m+1\r\n                                    })\r\n\r\n                                    // updates CA Subtitle Input\r\n                                    document.querySelector(\"#CASubtitleInput\").value = this.modes[m].configs.subtitle;\r\n    \r\n                                    this.forceUpdate(); \r\n                                }); \r\n\r\n                                }}>\r\n                            Load\r\n                        </button>\r\n                        <input type=\"file\" className={\"file\"} id=\"CAFileUpload\" accept=\"application/json\"/>\r\n                        <button className=\"button fileButton\" onClick={ () => { document.querySelector(\"#CAFileUpload\").click(); } }>\r\n                            Browse\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* file input display */}\r\n                    <div className=\"onePaddingLeft\">\r\n                        <h2>\r\n                            {document.querySelector(\"#CAFileUpload\") && document.querySelector(\"#CAFileUpload\").files.length !== 0 ? document.querySelector(\"#CAFileUpload\").files[0].name : \"No File Selected\"}\r\n                        </h2>\r\n                    </div>\r\n\r\n                    <div className=\"ruleDescriptions\">\r\n                        <h2>\r\n                            Rules\r\n                        </h2>\r\n                        {rules}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class CAGridData extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.startTime = Date.now();\r\n    }\r\n\r\n    render()\r\n    {\r\n        var renderer = this.props.renderRef;\r\n\r\n        return (\r\n            <div className=\"gridData\">\r\n                <h1> Data </h1>\r\n                <h2> Generation: {renderer.CellularAutomata.generation} </h2>\r\n                <h2> Time since start: {((Date.now() - this.startTime) / 1000).toFixed(1)}s </h2>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport { CAGrid } from './Cellular-Automata-JS/react components/import.js';\r\n\r\n\r\nvar cellAutoGridRef = React.createRef();\r\n\r\n\r\nvar obj = {\r\n    width: window.innerWidth*.5,\r\n    height: window.innerHeight*.75,\r\n}\r\n\r\nvar cellAutoGrid = <CAGrid configs={obj} ref={cellAutoGridRef} gridDataEnabled={true} gridInputEnabled={true}/>;\r\n\r\nvar elements = (\r\n    <div id=\"group\">\r\n        {cellAutoGrid}\r\n    </div>\r\n)\r\n\r\nReactDOM.render(elements, document.getElementById(\"root\"));","// helper class for converting JS objects to JSON files and vice versa.\r\n// Thanks to the StackOverflow answer from Shobhit Sharma\r\n\r\nimport { Vector, CellularAutomata } from'./import'\r\n\r\nexport default class JSONConverter\r\n{\r\n    // converts JavaScript object into a string. Note, it will also handle functions and arrow functions, not class methods\r\n    static JSToJSON(obj)\r\n    {\r\n        return JSON.stringify(obj, function(key, value) {\r\n            var fnBody;\r\n\r\n            // appends prefix to arrow function to identify at parse\r\n            if (value instanceof Function || typeof value == 'function')\r\n            {\r\n                fnBody = String(value);\r\n                if (fnBody.length < 8 || fnBody.substring(0, 8) !== 'function') { //this is ES6 Arrow Function\r\n                    return '_NuFrRa_' + fnBody;\r\n                }\r\n                return fnBody;\r\n            }\r\n\r\n            if (value instanceof RegExp)\r\n            {\r\n                return '_PxEgEr_' + value;\r\n            }\r\n\r\n            if (value instanceof Vector)\r\n            {\r\n                return '_Vector_' + value;\r\n            }\r\n\r\n            // CellularAutomata.grid.mat is packaged as a json and then stringified\r\n            if (value instanceof CellularAutomata)\r\n            {\r\n                return '_CellAu_' + JSON.stringify(JSONConverter.packageMapByState(value.grid.mat, Object.keys(obj.cellColors).length));\r\n            }\r\n            \r\n            return value;\r\n        });\r\n    }\r\n\r\n    // returns a js object with the possible map values as keys and the map keys as values in an array at each obj key\r\n    static packageMapByState(map, stateAmt)\r\n    {\r\n        var obj = {};\r\n\r\n        // initializes each cell state's array\r\n        for (let i = 0; i < stateAmt; i++)\r\n        {\r\n            obj[i] = [];\r\n        }\r\n\r\n        // adds each map entry to the correct spot in the object\r\n        map.forEach( (val, key, map) =>\r\n        {\r\n            obj[val].push(key);\r\n        });\r\n\r\n        return obj;\r\n    }\r\n\r\n    // unpackages map string\r\n    static unpackageMapByState(str)\r\n    {\r\n        var obj = JSON.parse(str);\r\n        var map = new Map();\r\n\r\n        // cell state loop\r\n        for (let state in obj)\r\n        {\r\n            for (let coord in obj[state])\r\n            {\r\n                map.set(obj[state][coord], Number(state));\r\n            }\r\n        }\r\n        \r\n        return map;\r\n    }\r\n\r\n    // converts JSON object, as a string, to a JavaScript object. Note, this uses previously appended prefixes to handle arrow functions and regex.\r\n    static JSONToJS(string)\r\n    {\r\n        return JSON.parse(string, function(key, value) {\r\n            var prefix;\r\n\r\n            if (typeof value != 'string') {\r\n                return value;\r\n            }\r\n            if (value.length < 8) {\r\n              return value;\r\n            }\r\n    \r\n            prefix = value.substring(0, 8);\r\n\r\n            // if (false && value.match(\"/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/\")) {\r\n            //     return new Date(value);\r\n            // }\r\n    \r\n            if (prefix === 'function')\r\n            {\r\n              return eval('(' + value + ')');\r\n            }\r\n\r\n            if (prefix === '_PxEgEr_')\r\n            {\r\n              return eval(value.slice(8));\r\n            }\r\n\r\n            if (prefix === '_NuFrRa_')\r\n            {\r\n                return eval(value.slice(8));\r\n            }\r\n            \r\n            if (prefix === '_Vector_')\r\n            {\r\n                var VectorArr = eval(value.slice(8));\r\n                return new Vector(VectorArr[0], VectorArr[1])\r\n            }\r\n            \r\n            if (prefix === '_CellAu_')\r\n            {\r\n                return JSONConverter.unpackageMapByState(value.slice(8));\r\n            }\r\n            \r\n            return value;\r\n        });\r\n    }\r\n\r\n    // saves JS object as a JSON file\r\n    static ConvertToJSONFile(obj)\r\n    {\r\n        var string = JSONConverter.JSToJSON(obj);\r\n        var blob = new Blob([string], {type: 'application/json'});\r\n\r\n        JSONConverter.saveBlob(blob, \"save.json\")\r\n    }\r\n\r\n    // saves given blob with given fileName\r\n    static saveBlob(blob, fileName)\r\n    {\r\n        var a = document.createElement(\"a\");\r\n        document.body.appendChild(a);\r\n        a.style = \"display: none\";\r\n    \r\n        var url = window.URL.createObjectURL(blob);\r\n        a.href = url;\r\n        a.download = fileName;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    }\r\n\r\n    // saves given CARender object\r\n    static SaveCARender(render)\r\n    {\r\n        var obj = Object.assign({}, render.configs);\r\n        obj.paused = render.paused;\r\n        obj.drawSpecificState = render.drawSpecificState;\r\n        obj.drawState = render.drawState;\r\n\r\n        JSONConverter.ConvertToJSONFile(obj);\r\n    }\r\n\r\n    // loads JSON file and reinstantiates CARender based upon it\r\n    static LoadCARender(json, callback)\r\n    {\r\n        // stops attempting to load file if there is no file\r\n        if (json === undefined)\r\n        {\r\n            return;\r\n        }\r\n\r\n        json.text(); // begins asynchronous call to load json\r\n        json.text().then( (text) => \r\n        {\r\n            var obj = JSONConverter.JSONToJS(text);\r\n\r\n            callback(obj);\r\n            // console.log(Date.now(), obj)\r\n            // return obj;\r\n            // JSONConverter.LoadCARenderFromObj(render, obj)\r\n        })\r\n    }\r\n    \r\n    // resets simulation with new configs object\r\n    static LoadCARenderFromObj(render, obj)\r\n    {\r\n        var map = obj.CellularAutomata;\r\n        obj.CellularAutomata = new CellularAutomata(obj);\r\n        obj.CellularAutomata.grid.setNewMap(map);\r\n    \r\n        render.ReInstantiate(obj);\r\n    }\r\n}"],"sourceRoot":""}