[{"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\index.js":"1","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\react components\\CAGrid.js":"2","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\CARender.js":"3","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\import.js":"4","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\NSet.js":"5","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\Grid.js":"6","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\CellularAutomata.js":"7","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\Vector.js":"8","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\UserInput.js":"9","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\Viewer.js":"10","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\react components\\import.js":"11","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\react components\\CAData.js":"12","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\react components\\CAInput.js":"13","C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\JSONConverter.js":"14"},{"size":560,"mtime":1611417833768,"results":"15","hashOfConfig":"16"},{"size":3201,"mtime":1611109210521,"results":"17","hashOfConfig":"16"},{"size":20431,"mtime":1611111050978,"results":"18","hashOfConfig":"16"},{"size":427,"mtime":1610817825416,"results":"19","hashOfConfig":"16"},{"size":4096,"mtime":1610305865064,"results":"20","hashOfConfig":"16"},{"size":4290,"mtime":1610929565608,"results":"21","hashOfConfig":"16"},{"size":2325,"mtime":1610928637500,"results":"22","hashOfConfig":"16"},{"size":4057,"mtime":1610999026165,"results":"23","hashOfConfig":"16"},{"size":11626,"mtime":1611416476191,"results":"24","hashOfConfig":"16"},{"size":3574,"mtime":1611021010480,"results":"25","hashOfConfig":"16"},{"size":159,"mtime":1610741807874,"results":"26","hashOfConfig":"16"},{"size":570,"mtime":1610744750101,"results":"27","hashOfConfig":"16"},{"size":10319,"mtime":1611013357811,"results":"28","hashOfConfig":"16"},{"size":5781,"mtime":1611109225524,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"qvqze0",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\index.js",[],["60","61"],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\react components\\CAGrid.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\CARender.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\import.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\NSet.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\Grid.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\CellularAutomata.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\Vector.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\UserInput.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\Viewer.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\react components\\import.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\react components\\CAData.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\react components\\CAInput.js",[],"C:\\Users\\nicol\\Documents\\GitHub\\Cellular-Automata-JS\\examples\\React\\react-ca\\src\\Cellular-Automata-JS\\JSONConverter.js",["62","63","64","65"],"// helper class for converting JS objects to JSON files and vice versa.\r\n// Thanks to the StackOverflow answer from Shobhit Sharma\r\n\r\nimport { Vector, CellularAutomata } from'./import'\r\n\r\nexport default class JSONConverter\r\n{\r\n    // converts JavaScript object into a string. Note, it will also handle functions and arrow functions, not class methods\r\n    static JSToJSON(obj)\r\n    {\r\n        return JSON.stringify(obj, function(key, value) {\r\n            var fnBody;\r\n\r\n            // appends prefix to arrow function to identify at parse\r\n            if (value instanceof Function || typeof value == 'function')\r\n            {\r\n                fnBody = String(value);\r\n                if (fnBody.length < 8 || fnBody.substring(0, 8) !== 'function') { //this is ES6 Arrow Function\r\n                    return '_NuFrRa_' + fnBody;\r\n                }\r\n                return fnBody;\r\n            }\r\n\r\n            if (value instanceof RegExp)\r\n            {\r\n                return '_PxEgEr_' + value;\r\n            }\r\n\r\n            if (value instanceof Vector)\r\n            {\r\n                return '_Vector_' + value;\r\n            }\r\n\r\n            // CellularAutomata.grid.mat is packaged as a json and then stringified\r\n            if (value instanceof CellularAutomata)\r\n            {\r\n                return '_CellAu_' + JSON.stringify(JSONConverter.packageMapByState(value.grid.mat, Object.keys(obj.cellColors).length));\r\n            }\r\n            \r\n            return value;\r\n        });\r\n    }\r\n\r\n    // returns a js object with the possible map values as keys and the map keys as values in an array at each obj key\r\n    static packageMapByState(map, stateAmt)\r\n    {\r\n        var obj = {};\r\n\r\n        // initializes each cell state's array\r\n        for (let i = 0; i < stateAmt; i++)\r\n        {\r\n            obj[i] = [];\r\n        }\r\n\r\n        // adds each map entry to the correct spot in the object\r\n        map.forEach( (val, key, map) =>\r\n        {\r\n            obj[val].push(key);\r\n        });\r\n\r\n        return obj;\r\n    }\r\n\r\n    // unpackages map string\r\n    static unpackageMapByState(str)\r\n    {\r\n        var obj = JSON.parse(str);\r\n        var map = new Map();\r\n\r\n        // cell state loop\r\n        for (let state in obj)\r\n        {\r\n            for (let coord in obj[state])\r\n            {\r\n                map.set(obj[state][coord], Number(state));\r\n            }\r\n        }\r\n        \r\n        return map;\r\n    }\r\n\r\n    // converts JSON object, as a string, to a JavaScript object. Note, this uses previously appended prefixes to handle arrow functions and regex.\r\n    static JSONToJS(string)\r\n    {\r\n        return JSON.parse(string, function(key, value) {\r\n            var prefix;\r\n\r\n            if (typeof value != 'string') {\r\n                return value;\r\n            }\r\n            if (value.length < 8) {\r\n              return value;\r\n            }\r\n    \r\n            prefix = value.substring(0, 8);\r\n\r\n            // if (false && value.match(\"/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/\")) {\r\n            //     return new Date(value);\r\n            // }\r\n    \r\n            if (prefix === 'function')\r\n            {\r\n              return eval('(' + value + ')');\r\n            }\r\n\r\n            if (prefix === '_PxEgEr_')\r\n            {\r\n              return eval(value.slice(8));\r\n            }\r\n\r\n            if (prefix === '_NuFrRa_')\r\n            {\r\n                return eval(value.slice(8));\r\n            }\r\n            \r\n            if (prefix === '_Vector_')\r\n            {\r\n                var VectorArr = eval(value.slice(8));\r\n                return new Vector(VectorArr[0], VectorArr[1])\r\n            }\r\n            \r\n            if (prefix === '_CellAu_')\r\n            {\r\n                return JSONConverter.unpackageMapByState(value.slice(8));\r\n            }\r\n            \r\n            return value;\r\n        });\r\n    }\r\n\r\n    // saves JS object as a JSON file\r\n    static ConvertToJSONFile(obj)\r\n    {\r\n        var string = JSONConverter.JSToJSON(obj);\r\n        var blob = new Blob([string], {type: 'application/json'});\r\n\r\n        JSONConverter.saveBlob(blob, \"save.json\")\r\n    }\r\n\r\n    // saves given blob with given fileName\r\n    static saveBlob(blob, fileName)\r\n    {\r\n        var a = document.createElement(\"a\");\r\n        document.body.appendChild(a);\r\n        a.style = \"display: none\";\r\n    \r\n        var url = window.URL.createObjectURL(blob);\r\n        a.href = url;\r\n        a.download = fileName;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    }\r\n\r\n    // saves given CARender object\r\n    static SaveCARender(render)\r\n    {\r\n        var obj = Object.assign({}, render.configs);\r\n        obj.paused = render.paused;\r\n        obj.drawSpecificState = render.drawSpecificState;\r\n        obj.drawState = render.drawState;\r\n\r\n        JSONConverter.ConvertToJSONFile(obj);\r\n    }\r\n\r\n    // loads JSON file and reinstantiates CARender based upon it\r\n    static LoadCARender(json, callback)\r\n    {\r\n        // stops attempting to load file if there is no file\r\n        if (json === undefined)\r\n        {\r\n            return;\r\n        }\r\n\r\n        json.text(); // begins asynchronous call to load json\r\n        json.text().then( (text) => \r\n        {\r\n            var obj = JSONConverter.JSONToJS(text);\r\n\r\n            callback(obj);\r\n            // console.log(Date.now(), obj)\r\n            // return obj;\r\n            // JSONConverter.LoadCARenderFromObj(render, obj)\r\n        })\r\n    }\r\n    \r\n    // resets simulation with new configs object\r\n    static LoadCARenderFromObj(render, obj)\r\n    {\r\n        var map = obj.CellularAutomata;\r\n        obj.CellularAutomata = new CellularAutomata(obj);\r\n        obj.CellularAutomata.grid.setNewMap(map);\r\n    \r\n        render.ReInstantiate(obj);\r\n    }\r\n}",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":103,"column":22,"nodeType":"72","messageId":"73","endLine":103,"endColumn":26},{"ruleId":"70","severity":1,"message":"71","line":108,"column":22,"nodeType":"72","messageId":"73","endLine":108,"endColumn":26},{"ruleId":"70","severity":1,"message":"71","line":113,"column":24,"nodeType":"72","messageId":"73","endLine":113,"endColumn":28},{"ruleId":"70","severity":1,"message":"71","line":118,"column":33,"nodeType":"72","messageId":"73","endLine":118,"endColumn":37},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]